<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Spring Boot Parent -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.techishthoughts.stocks</groupId>
    <artifactId>apache-pekko-with-spring-boot-3</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    <name>apache-pekko-with-spring-boot-3</name>
    <description>Spring Boot + Pekko + Reactor stocks application with Hexagonal Architecture</description>

    <properties>
        <!-- Java and Encoding -->
        <java.version>21</java.version>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <maven.compiler.release>21</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Main Dependencies Versions -->
        <pekko.version>1.1.4</pekko.version>
        <scala.binary.version>2.13</scala.binary.version>
        <jackson.version>2.19.1</jackson.version>
        <netty.version>4.2.2.Final</netty.version>
        <logstash-logback.version>8.1</logstash-logback.version>

        <!-- MapStruct -->
        <mapstruct.version>1.6.3</mapstruct.version>

        <!-- Testing Framework Versions -->
        <cucumber.version>7.23.0</cucumber.version>
        <jmh.version>1.37</jmh.version>

        <!-- Plugin Versions -->
        <maven-compiler-plugin.version>3.14.0</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.5.3</maven-surefire-plugin.version>
        <maven-failsafe-plugin.version>3.5.3</maven-failsafe-plugin.version>
        <jmh-maven-plugin.version>0.2.2</jmh-maven-plugin.version>
        <rewrite-maven-plugin.version>6.11.0</rewrite-maven-plugin.version>

        <!-- Test Configuration -->
        <skipTests>false</skipTests>
        <skip.unit.tests>${skipTests}</skip.unit.tests>
        <skip.integration.tests>${skipTests}</skip.integration.tests>
        <skip.component.tests>${skipTests}</skip.component.tests>
        <skip.smoke.tests>${skipTests}</skip.smoke.tests>
        <skip.performance.tests>true</skip.performance.tests>
    </properties>

    <!-- Dependency Management -->
    <dependencyManagement>
        <dependencies>
            <!-- Pekko Dependencies -->
            <dependency>
                <groupId>org.apache.pekko</groupId>
                <artifactId>pekko-actor_${scala.binary.version}</artifactId>
                <version>${pekko.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.pekko</groupId>
                <artifactId>pekko-slf4j_${scala.binary.version}</artifactId>
                <version>${pekko.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.pekko</groupId>
                <artifactId>pekko-testkit_${scala.binary.version}</artifactId>
                <version>${pekko.version}</version>
            </dependency>

            <!-- Jackson Dependencies -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <!-- Netty Dependencies -->
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-resolver-dns-native-macos</artifactId>
                <version>${netty.version}</version>
                <classifier>osx-aarch_64</classifier>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- =============================================== -->
        <!-- MAIN DEPENDENCIES -->
        <!-- =============================================== -->

        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>io.netty</groupId>
                    <artifactId>netty-resolver-dns-native-macos</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator-autoconfigure</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Pekko Actor System -->
        <dependency>
            <groupId>org.apache.pekko</groupId>
            <artifactId>pekko-actor-typed_${scala.binary.version}</artifactId>
            <version>${pekko.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.pekko</groupId>
            <artifactId>pekko-actor_${scala.binary.version}</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.pekko</groupId>
            <artifactId>pekko-slf4j_${scala.binary.version}</artifactId>
        </dependency>

        <!-- MapStruct for Object Mapping -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>

        <!-- Jackson for JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- Observability and Monitoring -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus-simpleclient</artifactId>
        </dependency>
        <!-- OpenTelemetry Support -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-otel</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-otlp</artifactId>
        </dependency>
        <!-- Context Propagation Library for Reactor -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>context-propagation</artifactId>
        </dependency>

        <!-- Grafana Pyroscope Continuous Profiling -->
        <dependency>
            <groupId>io.pyroscope</groupId>
            <artifactId>agent</artifactId>
            <version>2.1.2</version>
        </dependency>

        <!-- Structured Logging -->
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>${logstash-logback.version}</version>
        </dependency>

        <!-- Utilities -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>33.4.8-jre</version>
        </dependency>

        <!-- =============================================== -->
        <!-- TEST DEPENDENCIES -->
        <!-- =============================================== -->

        <!-- Core Testing Framework -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Pekko Testing -->
        <dependency>
            <groupId>org.apache.pekko</groupId>
            <artifactId>pekko-testkit_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Component/BDD Testing with Cucumber -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit-platform-engine</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-spring</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JMH for Performance Testing -->
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>${jmh.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <version>${jmh.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Maven Compiler Plugin with MapStruct -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <parameters>true</parameters>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- Spring Boot Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- Surefire Plugin for Unit Tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <skipTests>${skip.unit.tests}</skipTests>
                    <includes>
                        <include>**/unit/**/*Test.java</include>
                    </includes>
                    <excludes>
                        <exclude>**/integration/**</exclude>
                        <exclude>**/component/**</exclude>
                        <exclude>**/smoke/**</exclude>
                        <exclude>**/performance/**</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- Failsafe Plugin for Integration Tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <executions>
                    <!-- Integration Tests -->
                    <execution>
                        <id>integration-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <skipTests>${skip.integration.tests}</skipTests>
                            <includes>
                                <include>**/integration/**/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>

                    <!-- Component Tests -->
                    <execution>
                        <id>component-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <skipTests>${skip.component.tests}</skipTests>
                            <includes>
                                <include>**/component/**/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>

                    <!-- Smoke Tests -->
                    <execution>
                        <id>smoke-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <skipTests>${skip.smoke.tests}</skipTests>
                            <includes>
                                <include>**/smoke/**/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>

                    <!-- Verify Results -->
                    <execution>
                        <id>verify</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- JMH Plugin for Performance Testing -->
            <plugin>
                <groupId>pw.krejci</groupId>
                <artifactId>jmh-maven-plugin</artifactId>
                <version>${jmh-maven-plugin.version}</version>
                <configuration>
                    <skip>${skip.performance.tests}</skip>
                </configuration>
            </plugin>

            <!-- OpenRewrite Plugin for Automatic Code Fixes -->
            <plugin>
                <groupId>org.openrewrite.maven</groupId>
                <artifactId>rewrite-maven-plugin</artifactId>
                <version>${rewrite-maven-plugin.version}</version>
                <configuration>
                    <activeRecipes>
                        <recipe>org.openrewrite.java.format.AutoFormat</recipe>
                        <recipe>org.openrewrite.java.RemoveUnusedImports</recipe>
                        <recipe>org.openrewrite.java.OrderImports</recipe>
                        <recipe>org.openrewrite.java.format.EmptyNewlineAtEndOfFile</recipe>
                        <recipe>org.openrewrite.java.format.BlankLines</recipe>
                        <recipe>org.openrewrite.java.format.TabsAndIndents</recipe>
                        <recipe>org.openrewrite.java.format.Spaces</recipe>
                    </activeRecipes>
                    <activeStyles>
                        <style>org.openrewrite.java.GoogleJavaFormat</style>
                    </activeStyles>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- Profiles for different testing scenarios -->
    <profiles>
        <!-- All Tests Profile -->
        <profile>
            <id>all-tests</id>
            <properties>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
                <skip.component.tests>false</skip.component.tests>
                <skip.smoke.tests>false</skip.smoke.tests>
            </properties>
        </profile>

        <!-- Performance Tests Profile -->
        <profile>
            <id>performance</id>
            <properties>
                <skip.performance.tests>false</skip.performance.tests>
            </properties>
        </profile>

        <!-- CI Profile -->
        <profile>
            <id>ci</id>
            <properties>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
                <skip.component.tests>false</skip.component.tests>
                <skip.smoke.tests>false</skip.smoke.tests>
                <skip.performance.tests>true</skip.performance.tests>
            </properties>
        </profile>

        <!-- MacOS Native DNS Resolver -->
        <profile>
            <id>netty-resolver-dns-native-macos-aarch64</id>
            <activation>
                <os>
                    <family>mac</family>
                    <arch>aarch64</arch>
                </os>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>io.netty</groupId>
                    <artifactId>netty-resolver-dns-native-macos</artifactId>
                    <classifier>osx-aarch_64</classifier>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
</project>
