version: '3.8'

networks:
  stocks-network:
    driver: bridge

volumes:
  app-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

services:
  # =============================================================================
  # MONITORING SERVICES (Profile: monitoring)
  # =============================================================================

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: stocks-jaeger
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    networks:
      - stocks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: stocks-prometheus
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - stocks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  loki:
    image: grafana/loki:latest
    container_name: stocks-loki
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - stocks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  promtail:
    image: grafana/promtail:latest
    container_name: stocks-promtail
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "9080:9080"
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - stocks-network
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: stocks-grafana
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - stocks-network
    depends_on:
      - prometheus
      - loki
      - jaeger
      - otel-collector
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  pyroscope:
    image: grafana/pyroscope:latest
    container_name: stocks-pyroscope
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "4040:4040"
    networks:
      - stocks-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4040/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:latest
    container_name: stocks-alertmanager
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
    networks:
      - stocks-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: stocks-otel-collector
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./monitoring/otel-collector.yml:/etc/otel-collector-config.yaml:ro
    networks:
      - stocks-network
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: stocks-node-exporter
    restart: unless-stopped
    profiles: ["monitoring", "full"]
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - stocks-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: stocks-cadvisor
    restart: unless-stopped
    profiles: ["cadvisor"] # Optional service
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/run/containers:/var/run/containers:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - stocks-network
    privileged: true
    devices:
      - /dev/kmsg
    command:
      - '--housekeeping_interval=10s'
      - '--max_housekeeping_interval=15s'
      - '--allow_dynamic_housekeeping=true'
      - '--storage_duration=1m0s'
      - '--docker_only=false'

  # =============================================================================
  # APPLICATION SERVICE (Profile: app)
  # =============================================================================

  stocks-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: stocks-service
    restart: unless-stopped
    profiles: ["app", "full"]
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8081
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus,loggers
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_TECHISHTHOUGHTS: DEBUG
      LOGGING_FILE_PATH: /app/logs
      LOGGING_PATTERN_FILE: "%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
      # JVM Optimization with OpenTelemetry
      JAVA_OPTS: >-
        -javaagent:/app/opentelemetry-javaagent.jar
        --add-opens=java.base/java.lang=ALL-UNNAMED
        --add-opens=java.base/java.lang.reflect=ALL-UNNAMED
        --add-opens=java.base/java.util=ALL-UNNAMED
        --add-opens=java.base/java.util.concurrent=ALL-UNNAMED
        --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
        --add-opens=java.base/java.util.concurrent.locks=ALL-UNNAMED
        --add-opens=java.base/java.net=ALL-UNNAMED
        --add-opens=java.base/java.io=ALL-UNNAMED
        --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
        --add-opens=java.base/sun.net.www.protocol.http=ALL-UNNAMED
        --add-opens=java.base/sun.net.www.protocol.https=ALL-UNNAMED
        --add-opens=java.base/java.security=ALL-UNNAMED
        --add-opens=java.base/javax.net.ssl=ALL-UNNAMED
        --add-opens=java.logging/java.util.logging=ALL-UNNAMED
        --add-opens=java.management/java.lang.management=ALL-UNNAMED
        --add-opens=java.management/sun.management=ALL-UNNAMED
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=80.0
        -XX:+UnlockExperimentalVMOptions
        -XX:+UseZGC
        -XX:+UnlockDiagnosticVMOptions
        -XX:+UseTransparentHugePages
        -XX:+UseLargePages
        -XX:+AlwaysPreTouch
        -XX:+UseStringDeduplication
        -XX:+OptimizeStringConcat
        -XX:+UseCompressedOops
        -XX:+UseCompressedClassPointers
        -XX:+EnableDynamicAgentLoading
        -XX:+UseNUMA
        -XX:+TieredCompilation
        -XX:TieredStopAtLevel=4
        -XX:+UseCodeCacheFlushing
        -XX:ReservedCodeCacheSize=256m
        -XX:InitialCodeCacheSize=64m
        -XX:CompileThreshold=1000
        -XX:+UseCountedLoopSafepoints
        -XX:+UseLoopPredicate
        -XX:+RangeCheckElimination
        -XX:+EliminateLocks
        -XX:+DoEscapeAnalysis
        -XX:+EliminateAllocations
        -XX:+UseSuperWord
        -XX:+UseVectorCmov
        -XX:+UseAESIntrinsics
        -XX:+UseSHA1Intrinsics
        -XX:+UseSHA256Intrinsics
        -XX:+UseSHA512Intrinsics
        -XX:+UseAdler32Intrinsics
        -XX:+UseCRC32Intrinsics
        -XX:+UseCRC32CIntrinsics

      # OpenTelemetry Configuration
      OTEL_SERVICE_NAME: "stocks-service"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_TRACES_EXPORTER: "otlp"
      OTEL_LOGS_EXPORTER: "none"
      OTEL_METRICS_EXPORTER: "none"
      OTEL_PROPAGATORS: "tracecontext,baggage"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=stocks-service,service.version=1.0.0,deployment.environment=docker"
    volumes:
      - app-logs:/app/logs
    networks:
      - stocks-network
    depends_on:
      - otel-collector
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
