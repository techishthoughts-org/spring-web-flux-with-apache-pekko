name: 🏷️ Auto Tag & Release

on:
  push:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  auto-tag-and-release:
    name: 🏷️ Create Tag & Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.project-version.outputs.version }}
      tag-name: ${{ steps.project-version.outputs.tag-name }}
      release-created: ${{ steps.check-tag.outputs.exists == 'false' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🧪 Run tests before tagging
        run: ./mvnw test -B

      - name: 📄 Get project version from pom.xml
        id: project-version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          TAG_NAME="v$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Project version: $VERSION"
          echo "Tag name: $TAG_NAME"

      - name: 🔍 Check if tag exists
        id: check-tag
        run: |
          if git rev-parse "${{ steps.project-version.outputs.tag-name }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.project-version.outputs.tag-name }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.project-version.outputs.tag-name }} does not exist"
          fi

      - name: 📦 Build application package
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          echo "🏗️ Building application package..."
          ./mvnw clean package -DskipTests -B
          echo "✅ Application package built successfully"

      - name: 🐳 Set up Docker Buildx
        if: steps.check-tag.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Docker image
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          TAG_NAME="${{ steps.project-version.outputs.tag-name }}"
          echo "🐳 Building Docker image for $TAG_NAME..."
          docker build -t stocks-service:$TAG_NAME .
          docker save stocks-service:$TAG_NAME > stocks-service-$TAG_NAME.tar
          echo "✅ Docker image built and saved"

      - name: 📋 Generate release notes
        if: steps.check-tag.outputs.exists == 'false'
        id: release-notes
        run: |
          TAG_NAME="${{ steps.project-version.outputs.tag-name }}"
          VERSION="${{ steps.project-version.outputs.version }}"
          cat > release-notes.md << EOF
          # 🚀 Release $TAG_NAME

          ## 📦 What's Included

          - **JAR Package**: Ready-to-run Spring Boot application
          - **Docker Image**: Container image for deployment
          - **Container Registry**: Published to GitHub Container Registry
          - **Source Code**: Complete source code archive

          ## ⚡ Key Features

          - **Spring WebFlux**: Reactive web framework integration
          - **Apache Pekko Actors**: Fault-tolerant, concurrent processing with Actor Model
          - **Finnhub API Integration**: Real-world stock data consumption demonstration
          - **Hexagonal Architecture**: Clean separation of concerns
          - **Enterprise Observability**: Structured logging and metrics
          - **Comprehensive Testing**: Multi-level testing strategy

          ## 🚀 Quick Start

          ### Using JAR
          \`\`\`bash
          java -jar stocks-demo-$VERSION.jar
          \`\`\`

          ### Using Docker (Local)
          \`\`\`bash
          docker load < stocks-service-$TAG_NAME.tar
          docker run -p 8080:8080 stocks-service:$TAG_NAME
          \`\`\`

          ### Using Container Registry
          \`\`\`bash
          docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG_NAME
          \`\`\`

          ## 📚 Documentation

          - [Getting Started](https://github.com/${{ github.repository }}/blob/main/docs/development/GETTING_STARTED.md)
          - [Architecture Guide](https://github.com/${{ github.repository }}/blob/main/docs/guides/ARCHITECTURE.md)
          - [Deployment Guide](https://github.com/${{ github.repository }}/blob/main/docs/operations/DEPLOYMENT.md)

          ---

          **🤖 This release was automatically created by GitHub Actions**
          EOF

      - name: 🏷️ Create and push tag
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          TAG_NAME="${{ steps.project-version.outputs.tag-name }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"
          echo "✅ Created and pushed tag: $TAG_NAME"

      - name: 📦 Create GitHub Release with artifacts
        if: steps.check-tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.project-version.outputs.tag-name }}
          name: 🚀 Release ${{ steps.project-version.outputs.tag-name }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.project-version.outputs.version, 'SNAPSHOT') }}
          files: |
            target/stocks-demo-${{ steps.project-version.outputs.version }}.jar
            stocks-service-${{ steps.project-version.outputs.tag-name }}.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ℹ️ Tag already exists
        if: steps.check-tag.outputs.exists == 'true'
        run: |
          echo "ℹ️ Tag ${{ steps.project-version.outputs.tag-name }} already exists, skipping release creation"

  publish-packages:
    name: 📦 Publish Packages
    runs-on: ubuntu-latest
    needs: auto-tag-and-release
    if: needs.auto-tag-and-release.outputs.release-created == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.auto-tag-and-release.outputs.tag-name }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📊 Package publishing summary
        run: |
          TAG_NAME="${{ needs.auto-tag-and-release.outputs.tag-name }}"
          VERSION="${{ needs.auto-tag-and-release.outputs.version }}"
          echo "🎉 Packages published successfully!"
          echo "📦 Published packages:"
          echo "  • Container Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG_NAME"
          echo "  • Container Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME"
          echo "🔗 Package URL: https://github.com/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }}"
